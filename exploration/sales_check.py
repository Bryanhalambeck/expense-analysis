# =====================================================
# üìä sales_check.py
# -----------------------------------------------------
"""
This script inspects Travel and Meals spending in the Sales department, identifying anomalies by employee, vendor, and timing.

üìò How it works:
	‚Ä¢	We isolate all Travel and Meals expenses tied to the Sales team.
	‚Ä¢	We flag unusually high spenders using z-scores:
	‚Ä¢	Travel outliers: z > 1.5
	‚Ä¢	Meals outliers: z > 1.0
	‚Ä¢	We check for transactions that occurred on weekends ‚Äî which may signal non-standard activity.
	‚Ä¢	We also verify whether expected spend categories (like Training or Software) are completely missing.

This targeted review helps catch lopsided spending patterns, uncover outliers, and highlight gaps in category use ‚Äî offering a practical, team-specific lens for financial oversight.
"""

import pandas as pd
import duckdb
from scipy.stats import zscore

# -----------------------------------------------------
# 1Ô∏è‚É£ Load Data and Create Flags
# -----------------------------------------------------
df = pd.read_csv("Untitledspreadsheet72.csv")
df['date'] = pd.to_datetime(df['date'], errors='coerce')
df['day_of_week'] = df['date'].dt.dayofweek
df['is_weekend'] = df['day_of_week'] >= 5

# -----------------------------------------------------
# 2Ô∏è‚É£ Register with DuckDB
# -----------------------------------------------------
con = duckdb.connect()
con.register("sales_data", df)

# -----------------------------------------------------
# 3Ô∏è‚É£ Travel Spend ‚Äì Sales Department
# -----------------------------------------------------
sales_travel = con.execute("""
    SELECT * FROM sales_data
    WHERE department = 'Sales' AND category = 'Travel'
""").df()

# Employee-Level Travel Spend
employee_travel = sales_travel.groupby('employee')['amount'].sum().reset_index()
employee_travel['z_score'] = zscore(employee_travel['amount'])

print("‚úàÔ∏è Travel Spend by Employee (Sales Dept):")
print(employee_travel.sort_values('amount', ascending=False))

print("\nüö© Employees with Travel z-score > 1.5:")
print(employee_travel[employee_travel['z_score'] > 1.5])
print("\n" + "="*50 + "\n")

# Vendor-Level Travel Spend
vendor_travel = sales_travel.groupby('vendor')['amount'].sum().reset_index()
vendor_travel['z_score'] = zscore(vendor_travel['amount'])

print("‚úàÔ∏è Travel Spend by Vendor (Sales Dept):")
print(vendor_travel.sort_values('amount', ascending=False))

print("\nüö© Vendors with Travel z-score > 1.5:")
print(vendor_travel[vendor_travel['z_score'] > 1.5])
print("\n" + "="*50 + "\n")

# Weekend Travel Transactions
weekend_travel = sales_travel[sales_travel['is_weekend']]
print("üìÖ Weekend Travel Transactions (Sales Dept):")
print(weekend_travel[['date', 'employee', 'vendor', 'amount']])
print("\n" + "="*50 + "\n")

# -----------------------------------------------------
# 4Ô∏è‚É£ Meals Spend ‚Äì Sales Department
# -----------------------------------------------------
sales_meals = con.execute("""
    SELECT * FROM sales_data
    WHERE department = 'Sales' AND category = 'Meals'
""").df()

# Employee-Level Meals Spend
employee_meals = sales_meals.groupby('employee')['amount'].sum().reset_index()
employee_meals['z_score'] = zscore(employee_meals['amount'])

print("üçΩÔ∏è Meals Spend by Employee (Sales Dept):")
print(employee_meals.sort_values('amount', ascending=False))

print("\nüö© Employees with Meals z-score > 1.0:")
print(employee_meals[employee_meals['z_score'] > 1.0])
print("\n" + "="*50 + "\n")

# Weekend Meals Transactions
weekend_meals = sales_meals[sales_meals['is_weekend']]
print("üìÖ Weekend Meals Transactions (Sales Dept):")
print(weekend_meals[['date', 'employee', 'vendor', 'amount']])
print("\n" + "="*50 + "\n")

# -----------------------------------------------------
# 5Ô∏è‚É£ Missing Spend Categories Check
# -----------------------------------------------------
missing_categories = ['Software', 'Training']
for cat in missing_categories:
    count = con.execute(f"""
        SELECT COUNT(*) FROM sales_data
        WHERE department = 'Sales' AND category = '{cat}'
    """).fetchone()[0]
    
    if count == 0:
        print(f"‚ùå No {cat} spend found for Sales")
    else:
        print(f"‚úÖ Found {count} {cat} transaction(s) for Sales")
